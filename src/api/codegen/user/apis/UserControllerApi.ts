/* tslint:disable */
/* eslint-disable */
/**
 * service-user
 * 用户服务API接口说明
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EmailLoginDTO,
  ResponseDailyBonusVO,
  ResponseObject,
  ResponseUserDetailVO,
  SendLoginEmailCodeDTO,
  UpdateUserDetailDTO,
} from '../models/index';
import {
    EmailLoginDTOFromJSON,
    EmailLoginDTOToJSON,
    ResponseDailyBonusVOFromJSON,
    ResponseDailyBonusVOToJSON,
    ResponseObjectFromJSON,
    ResponseObjectToJSON,
    ResponseUserDetailVOFromJSON,
    ResponseUserDetailVOToJSON,
    SendLoginEmailCodeDTOFromJSON,
    SendLoginEmailCodeDTOToJSON,
    UpdateUserDetailDTOFromJSON,
    UpdateUserDetailDTOToJSON,
} from '../models/index';

export interface GetUserDetailRequest {
    uid: number;
}

export interface LoginRequest {
    emailLoginDTO: EmailLoginDTO;
}

export interface SendLoginEmailCodeRequest {
    sendLoginEmailCodeDTO: SendLoginEmailCodeDTO;
}

export interface UpdateUserDetailRequest {
    updateUserDetailDTO: UpdateUserDetailDTO;
}

/**
 * 
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     * 尝试获取当日奖励
     */
    async checkDailyBonusRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseDailyBonusVO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/checkDailyBonus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseDailyBonusVOFromJSON(jsonValue));
    }

    /**
     * 尝试获取当日奖励
     */
    async checkDailyBonus(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseDailyBonusVO> {
        const response = await this.checkDailyBonusRaw(initOverrides);
        return await response.value();
    }

    /**
     * 查询用户资料
     */
    async getUserDetailRaw(requestParameters: GetUserDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUserDetailVO>> {
        if (requestParameters.uid === null || requestParameters.uid === undefined) {
            throw new runtime.RequiredError('uid','Required parameter requestParameters.uid was null or undefined when calling getUserDetail.');
        }

        const queryParameters: any = {};

        if (requestParameters.uid !== undefined) {
            queryParameters['uid'] = requestParameters.uid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/getUserDetail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUserDetailVOFromJSON(jsonValue));
    }

    /**
     * 查询用户资料
     */
    async getUserDetail(requestParameters: GetUserDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUserDetailVO> {
        const response = await this.getUserDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 通过邮箱与验证码进行登录
     * 登录
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObject>> {
        if (requestParameters.emailLoginDTO === null || requestParameters.emailLoginDTO === undefined) {
            throw new runtime.RequiredError('emailLoginDTO','Required parameter requestParameters.emailLoginDTO was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailLoginDTOToJSON(requestParameters.emailLoginDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectFromJSON(jsonValue));
    }

    /**
     * 通过邮箱与验证码进行登录
     * 登录
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObject> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 查询当前用户的个人资料
     */
    async myUserDetailRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseUserDetailVO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/user/myUserDetail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseUserDetailVOFromJSON(jsonValue));
    }

    /**
     * 查询当前用户的个人资料
     */
    async myUserDetail(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseUserDetailVO> {
        const response = await this.myUserDetailRaw(initOverrides);
        return await response.value();
    }

    /**
     * 发送登录邮件，若当前邮箱未注册，则发送注册邮件
     * 发送登录邮件
     */
    async sendLoginEmailCodeRaw(requestParameters: SendLoginEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObject>> {
        if (requestParameters.sendLoginEmailCodeDTO === null || requestParameters.sendLoginEmailCodeDTO === undefined) {
            throw new runtime.RequiredError('sendLoginEmailCodeDTO','Required parameter requestParameters.sendLoginEmailCodeDTO was null or undefined when calling sendLoginEmailCode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/sendLoginEmailCode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendLoginEmailCodeDTOToJSON(requestParameters.sendLoginEmailCodeDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectFromJSON(jsonValue));
    }

    /**
     * 发送登录邮件，若当前邮箱未注册，则发送注册邮件
     * 发送登录邮件
     */
    async sendLoginEmailCode(requestParameters: SendLoginEmailCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObject> {
        const response = await this.sendLoginEmailCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 更新用户资料
     */
    async updateUserDetailRaw(requestParameters: UpdateUserDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponseObject>> {
        if (requestParameters.updateUserDetailDTO === null || requestParameters.updateUserDetailDTO === undefined) {
            throw new runtime.RequiredError('updateUserDetailDTO','Required parameter requestParameters.updateUserDetailDTO was null or undefined when calling updateUserDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/user/updateUserDetail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserDetailDTOToJSON(requestParameters.updateUserDetailDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseObjectFromJSON(jsonValue));
    }

    /**
     * 更新用户资料
     */
    async updateUserDetail(requestParameters: UpdateUserDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponseObject> {
        const response = await this.updateUserDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
